export class ISWorker{createWorker(){let e=new Blob([`(${()=>{let e=new Map;self.addEventListener("message",async t=>{let{src:r,origin:s}=t.data;if(s!==self.location.origin){self.postMessage({src:r,error:"Origin mismatch"});return}try{let t;if(e.has(r))t=e.get(r);else{let s=await fetch(r,{mode:"cors",cache:"force-cache",credentials:"omit"});t=await s.blob(),e.set(r,t)}let s=await createImageBitmap(t);self.postMessage({src:r,bitmap:s},[s])}catch(e){self.postMessage({src:r,error:e.message})}})}})()`]),t=URL.createObjectURL(e),r=new Worker(t);return URL.revokeObjectURL(t),r}loadImage(e){return new Promise((t,r)=>{let s=a=>{a.data.src!==e.src&&r(null),this.imageFetcher.removeEventListener("message",s),a.data.error?r(null):t(a.data.bitmap)};this.imageFetcher.addEventListener("message",s),this.imageFetcher.postMessage(e)})}constructor(){this.imageFetcher=this.createWorker()}}void 0===window.MOTIONPAGE_FRONT?setTimeout(()=>{window.MOTIONPAGE_FRONT.isw=new ISWorker},150):window.MOTIONPAGE_FRONT.isw=new ISWorker;